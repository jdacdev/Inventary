@using Entities
@using Business

@inject NavigationManager NavManager;

<div>
    <EditForm Model="storage">
        <div class="form-group">
            <label>Referencia:</label>
            <InputText @bind-Value="storage.StorageId" class="form-control" />
        </div>
        <div class="form-group">
            <label>Ultima Actualización:</label>
            <InputDate @bind-Value="storage.LastUpdate" class="form-control" />
        </div>
        <div class="form-group">
            <label>Cantidad parcial:</label>
            <InputNumber @bind-Value="storage.PartialQuantity" class="form-control" />
        </div>
        <div class="form-group">
            <label>Producto:</label>
            <InputSelect @bind-Value="storage.ProductId" class="form-control">
                @foreach (var product in productList)
                {
                    <option value="@product.ProductId">@product.ProductName</option>
                }
            </InputSelect>
        </div>
        <div class="form-group">
            <label>Bodega:</label>
            <InputSelect @bind-Value="storage.WarehouseId" class="form-control">
                @foreach (var warehouse in warehouseList)
                {
                    <option value="@warehouse.WarehouseId">@warehouse.WarehouseName</option>
                }
            </InputSelect>
        </div>
        <input type="button" value="Agregar almacenamiento" @onclick="SaveStorage"/>
    </EditForm>

</div>
@code {
    StorageEntity storage = new StorageEntity();

    List<ProductEntity> productList = new List<ProductEntity>();

    List<WarehouseEntity> warehouseList = new List<WarehouseEntity>();

    protected override async Task OnInitializedAsync()
    {
        productList = B_Product.ListProducts();
        warehouseList = B_Warehouse.ListWarehouses();
    }

    private void SaveStorage()
    {
        B_Storage.CreateStorage(storage);
        NavManager.NavigateTo("storage/list");
    }
}
